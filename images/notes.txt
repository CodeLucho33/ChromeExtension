
ADD BUTTON AND INPUT TAG

<!-- Create an input element with type="text" and id="input-el" -->
        <!-- Create a SAVE INPUT button with id="input-btn" -->


STYLE THE BUTTON AND INPUT TAG 

width incluye el valor del padding.
Para que no ssea asÃ­ usar la propiedad 
box-sizing:border-box

MAKE THE INPUT BUTTON WORK WITH ONCLICK

// Log out "Button clicked!" when the user clicks the "SAVE INPUT" button


REFACTOR TO ADDEVENTLISTENER Ejemplo

<div id="box">Open the box!</div>

        let box = document.getElementById('box')
// 2. Add a click event listener to the box 
box.addEventListener('click', function(){
    console.log('"I want to open the box!"')
})

CREATE THE MYLEADS ARRAY AND INPUTEL

// Create two variables:
// myLeads -> should be assigned to an empty array
// inputEl -> should be assigned to the text input field


WHEN TO USE LET AND CONST

// If possible, use const. If not, use let.

// Which variables below should be changed from let to const?

// The customer wants to order some stuff. Here are the details:
let basePrice = 520
let discount = 120
let shippingCost = 12
let shippingTime = "5-12 days"

// Whops! Turns out the shipping will be a bit more complex
shippingCost = 15
shippingTime = "7-14 days"

// Calculating the full price
let fullPrice = basePrice - discount + shippingCost

// Finally, notifying the customer
console.log("Total cost: " + fullPrice + ". It will arrive in " + shippingTime)


PUSH TO THE MYLEADS ARRAY

// Push the value from the inputEl into the myLeads array 
    // instead of the hard-coded "www.awesomeleads.com" value
    // Google -> "get value from input field javascript"


    let myLeads = []
const inputEl = document.getElementById("input-el")
const inputBtn = document.getElementById("input-btn")

inputBtn.addEventListener("click", function() {
    // Push the value from the inputEl into the myLeads array 
    // instead of the hard-coded "www.awesomeleads.com" value
    // Google -> "get value from input field javascript"
    myLeads.push(inputEl.value)
    console.log(myLeads)
})


USE A FOR LOOP TO LOG OUT myLeads
let myLeads = ["www.awesomelead.com", "www.epiclead.com", "www.greatlead.com"]
const inputEl = document.getElementById("input-el")
const inputBtn = document.getElementById("input-btn")

inputBtn.addEventListener("click", function() {
    myLeads.push(inputEl.value)
    console.log(myLeads)
})


// Log out the items in the myLeads array using a for loop 

for(let i=0 ; i<myLeads.length;i++){
    console.log(myLeads[i])
}

CREATE THE UNORDERED LIST

 <!-- 1. Create an unordered list element (<ul>) with id="ul-el" -->
 // 2. Grab the unordered list and store it in a const variable called ulEl

 RENDER THE LEADS IN THE UNORDERED LIST
 // Render the leads in the unordered list using ulEl.textContent




 HOW TO RENDER <LI> ELEMENTS WITH INNERHTML



 let myLeads = ["www.awesomelead.com", "www.epiclead.com", "www.greatlead.com"]
const inputEl = document.getElementById("input-el")
const inputBtn = document.getElementById("input-btn")
const ulEl = document.getElementById("ul-el")

inputBtn.addEventListener("click", function() {
    myLeads.push(inputEl.value)
    console.log(myLeads)
})


for (let i = 0; i < myLeads.length; i++) {
    ulEl.innerHTML += "<li>" + myLeads[i] + "</li>"
}

WRITE YOUR FIRST INNERHTML

<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <div id="container">
        </div>
        <script src="index.js"></script>
    </body>
</html>


// Use .innerHTML to render a Buy! button inside the div container

const container = document.getElementById("container")

container.innerHTML = "<button>Buy!</button>"

SECOND PRACTICE CHANGE TEXT BUTTON

const container = document.getElementById("container")

container.innerHTML = "<button onclick='buy()'>Buy!</button>"

// When clicked, render a paragraph under the button (in the container)
// that says "Thank you for buying!"

function buy(){
    container.innerHTML += "<p>Thank you for buying!</p>"
}

// Replace .textContent with .innerHTML and use <li> tags
for (let i = 0; i < myLeads.length; i++) {
    ulEl.innerHTML += "<li>" + myLeads[i] + "</li> "
}
USE A createElement() AND append  insted of innerHTML
/ Let's try a different method!
for (let i = 0; i < myLeads.length; i++) {
    // ulEl.innerHTML += "<li>" + myLeads[i] + "</li>"
    // create element
    // set text content
    // append to ul
    const li = document.createElement("li")
    li.textContent = myLeads[i]
    ulEl.append(li)
}


IMPROVING THE PERFORMANCE OF APP



let myLeads = ["www.awesomelead.com", "www.epiclead.com", "www.greatlead.com"]
const inputEl = document.getElementById("input-el")
const inputBtn = document.getElementById("input-btn")
const ulEl = document.getElementById("ul-el")

inputBtn.addEventListener("click", function() {
    myLeads.push(inputEl.value)
    console.log(myLeads)
})

// 1. Create a variable, listItems, to hold all the HTML for the list items
// Assign it to an empty string to begin with
let listItems = ""
for (let i = 0; i < myLeads.length; i++) {
    // 2. Add the item to the listItems variable instead of the ulEl.innerHTML
    listItems += "<li>" + myLeads[i] + "</li>"
}
// 3. Render the listItems inside the unordered list using ulEl.innerHTML
ulEl.innerHTML = listItems



ADD THE <a>tag

unction renderLeads() {
    let listItems = ""
    for (let i = 0; i < myLeads.length; i++) {
        // Wrap the lead in an anchor tag (<a>) inside the <li>
        // Can you make the link open in a new tab?
        listItems += "<li><a href='" + myLeads[i] + "'>" + myLeads[i] + "</a></li>"
        console.log(listItems)
    }
    ulEl.innerHTML = listItems  
}

TEMPLETES STRINGS

`${varialbe}`

WHAT IS LOCALSTORAGE ?

// 1. Save a key-value pair in localStorage
// 2. Refresh the page. Get the value and log it to the console
// 3. Clear localStorage

// HINTS:
// localStorage.setItem(key, value)
// localStorage.getItem(key)
// localStorage.clear()
// PS: both key and value need to be strings

STORING ARRAYS IN LOCALSTORAGE

let myLeads = `["www.awesomelead.com"]`

// 1. Turn the myLeads string into an array
myLeads = JSON.parse(myLeads)
// 2. Push a new value to the array
myLeads.push("www.lead2.com")
// 3. Turn the array into a string again
myLeads = JSON.stringify(myLeads)
// 4. Console.log the string using typeof to verify that it's a string
console.log(typeof myLeads)


SAVE THE LeADS TO LOCALSTORAGE

let myLeads = []
const inputEl = document.getElementById("input-el")
const inputBtn = document.getElementById("input-btn")
const ulEl = document.getElementById("ul-el")

inputBtn.addEventListener("click", function() {
    myLeads.push(inputEl.value)
    inputEl.value = ""
    // Save the myLeads array to localStorage 
    // PS: remember JSON.stringify()
    localStorage.setItem("myLeads", JSON.stringify(myLeads) )
    renderLeads()
    
    // To verify that it works:
    console.log( localStorage.getItem("myLeads") )
})


GET THE LEADS FROM LOCALSTORAGE

// Get the leads from the localStorage - PS: JSON.parse()
// Store it in a variable, leadsFromLocalStorage
// Log out the variable

localStorage.clear()
let leadsFromLocalStorage = JSON.parse( localStorage.getItem("myLeads") )

console.log(leadsFromLocalStorage)

TRUTHY AN FALSY VALUES

// truthy
// falsy

// false
// 0
// ""
// null -> how you as a developer signalize emptiness
// undefined -> how JavaScript signalizes emptiness
// NaN


console.log(  Boolean("")   ) // false
console.log(  Boolean("0")  ) // true
console.log(  Boolean(100)  ) // true
console.log(  Boolean(null) ) // false
console.log(  Boolean([0])  ) // true
console.log(  Boolean(-0)   ) // false

CHECKING LOCALSTORAGE BEFORE RENDEREING
// 1. Check if leadsFromLocalStorage is truthy
// 2. If so, set myLeads to its value and call renderLeads()

MAKE THE DELETE BUTTON WORK

// 1. Store the delete button in a deleteBtn variable
// 2. Listen for double clicks on the delete button (google it!)
// 3. When clicked, clear localStorage, myLeads, and the DOM

HOW FUNCTION PARAMETES CAN IMPROVE OUR CODE

const welcomeEl = document.getElementById("welcome-el")

function greetUser() {
    welcomeEl.textContent = "Welcome back, Per Harald Borgen ðŸ‘‹"    
}

greetUser()


const welcomeEl = document.getElementById("welcome-el")

// Give the function a parameter, greeting, that replaces "Welcome back"
function greetUser(firstWords) {
    welcomeEl.textContent = `${firstWords}, Per Harald Borgen ðŸ‘‹` 
}

greetUser("Bonjuya")

const welcomeEl = document.getElementById("welcome-el")

function greetUser(greeting, name) {
    // Rewrite the expression using template literals
    welcomeEl.textContent = `${greeting} ,${name}`
}

greetUser("Howdy", "OP")

NUMBERS AS FUNCTION PARAMETERS


// Create a function, add(), that adds two numbers together and returns the sum

function add(n1,n2){
    return n1+ n2
}

console.log( add(3, 4)   ) // should log 7
console.log( add(9, 102) ) // should log 111

// What are greeting and name? parameters
// What are "Howdy" and "James"? arguments
// What are num1 and num2? parameters
// What are 3 and 4? arguments


//.                parameters
function greetUser(greeting, name) { 
    welcomeEl.textContent = `${greeting}, ${name} ðŸ‘‹`
}

//.        arguments
let hi = "Howdy"
greetUser(hi, "James")


function add(num1, num2) {
    return num1 + num2
}

add(3, 4)

ARRAYS AS PARAMETERS
/ Create a function, getFirst(arr), that returns the first item in the array
function getFirst(anything){
    return anything[0]
}

let yolanda =["xAx","b"]

console.log(getFirst(yolanda))
// Call it with an array as an argument to verify that it works